name: Deploy Django to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Use home directory instead of /root to avoid permission issues
            DEPLOY_DIR="$HOME/service"

            # Navigate to deploy directory or create it
            if [ ! -d "$DEPLOY_DIR" ]; then
              echo "Service directory not found, creating..."
              mkdir -p "$DEPLOY_DIR"
            fi
            cd "$DEPLOY_DIR"

            # Clone or pull repository
            if [ -d "$DEPLOY_DIR/.git" ]; then
              echo "Pulling latest changes..."
              git pull origin main
            else
              echo "Cloning repository..."
              git clone https://github.com/ozodbekAI/service.git "$DEPLOY_DIR"
              cd "$DEPLOY_DIR"
            fi

            # Update package lists and install dependencies
            if command -v apt-get > /dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y python3-pip python3-venv python3-dev libpq-dev git
            elif command -v yum > /dev/null 2>&1; then
              sudo yum update -y
              # Note: Amazon Linux 2 (and similar) may not have python3-venv package; use python3.10-venv or create virtualenv differently
              sudo yum install -y python3-pip python3-devel postgresql-devel git
            else
              echo "Neither apt-get nor yum found. Install dependencies manually."
              exit 1
            fi

            # Create and activate virtual environment
            if [ ! -d venv ]; then
              python3.10 -m venv venv
            fi
            # shellcheck disable=SC1091
            source venv/bin/activate

            # Upgrade pip and install dependencies
            pip install --upgrade pip

            # Fix psycopg2 install by installing psycopg2-binary instead of psycopg2 if build fails
            pip install -r requirements.txt || pip install psycopg2-binary && pip install -r requirements.txt --no-deps

            # Run migrations and collect static files
            python manage.py migrate
            python manage.py collectstatic --noinput

            # Install gunicorn and restart if running
            pip install gunicorn
            pkill -f gunicorn || echo "No existing gunicorn processes"

            # Start gunicorn in background, redirect logs to a file for debugging
            nohup gunicorn --bind 0.0.0.0:8000 config.wsgi:application > gunicorn.log 2>&1 &

            echo "Deployment completed successfully!"
            echo "Application is running on port 8000"
