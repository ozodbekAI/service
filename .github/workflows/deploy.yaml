name: Deploy Django to Google Cloud VM
on:
  push:
    branches: [ main ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: kompxizmat
          export_default_credentials: true

      - name: Debug GCloud Authentication
        run: |
          echo "Checking GCloud version and authentication status..."
          gcloud version
          gcloud auth list
          echo "GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS"
          if [ -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
            cat $GOOGLE_APPLICATION_CREDENTIALS
          else
            echo "Credentials file not found!"
          fi

      - name: Deploy to Google Cloud VM
        env:
          MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
        run: |
          # Verify VM exists
          gcloud compute instances describe ${{ secrets.GCP_VM_NAME }} --zone=${{ secrets.GCP_ZONE }} || echo "VM check failed"

          # SSH into the VM using gcloud compute ssh
          gcloud compute ssh --zone=${{ secrets.GCP_ZONE }} ${{ secrets.GCP_VM_NAME }} --project=kompxizmat --strict-host-key-checking=no --command="
            # Install dependencies
            sudo apt-get update
            sudo apt-get install -y python3-dev libpq-dev postgresql postgresql-contrib git

            # Clone or pull the project to /root/service
            if [ -d /root/service/.git ]; then
              cd /root/service
              git config --global user.email 'deploy@example.com'
              git config --global user.name 'Deployment Script'
              git stash save --include-untracked 'Deployment stash \$(date)'
              git pull origin main
              git stash list | grep -q 'stash' && git stash pop || echo 'No stashed changes to apply'
            else
              git clone https://github.com/ozodbekAI/service.git /root/service
              cd /root/service
            fi

            # Create virtual environment
            if [ ! -d venv ]; then
              python3 -m venv venv
            fi

            # Activate virtual environment
            source venv/bin/activate

            # Install requirements
            pip install --upgrade pip
            sed -i 's/psycopg2==2.9.10/psycopg2-binary==2.9.10/g' requirements.txt
            pip install -r requirements.txt

            # Create static directory
            mkdir -p static

            # Set STATIC_ROOT in settings.py
            if ! grep -q 'STATIC_ROOT' config/settings.py; then
              echo '# Setting STATIC_ROOT for collectstatic' >> config/settings.py
              echo 'import os' >> config/settings.py
              echo 'STATIC_ROOT = os.path.join(BASE_DIR, \"static\")' >> config/settings.py
            fi

            # Set MAILGUN_API_KEY in .env
            echo 'export MAILGUN_API_KEY=\"$MAILGUN_API_KEY\"' >> /root/service/.env

            # Run Django commands
            python manage.py migrate
            python manage.py collectstatic --no-input

            # Set permissions
            sudo chown -R www-data:www-data /root/service/static

            # Restart services
            sudo systemctl restart gunicorn || echo 'Gunicorn service not found'
            sudo systemctl restart nginx || echo 'Nginx service not found'
          "